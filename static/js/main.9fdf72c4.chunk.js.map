{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","inputRef","React","createRef","fileHandling","event","file","target","files","readExcel","Promise","resolve","reject","fileReader","FileReader","readAsArrayBuffer","onload","e","bufferArray","result","console","log","wb","XLSX","type","wsname","SheetNames","ws","Sheets","data","sheet_to_json","header","onerror","error","then","d","className","accept","ref","this","onChange","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RA6CeA,E,4MAzCbC,SAAWC,IAAMC,Y,EACjBC,aAAe,SAAAC,GACb,IAAIC,EAAOD,EAAME,OAAOC,MAAM,GAC9B,EAAKC,UAAUH,I,EAEjBG,UAAY,SAAAH,GACM,IAAII,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAa,IAAIC,WACvBD,EAAWE,kBAAkBT,GAC7BO,EAAWG,OAAS,SAAAC,GAClB,IAAMC,EAAcD,EAAEV,OAAOY,OAC7BC,QAAQC,IAAIH,GAEZ,IAAMI,EAAKC,OAAUL,EAAa,CAAEM,KAAM,WACpCC,EAASH,EAAGI,WAAW,GACvBC,EAAKL,EAAGM,OAAOH,GACfI,EAAON,QAAWO,cAAcH,EAAI,CAAEI,OAAQ,IACpDpB,EAAQkB,IAEVhB,EAAWmB,QAAU,SAAAC,GACnBrB,EAAOqB,OAGHC,MAAK,SAAAC,GACXf,QAAQC,IAAIc,O,4CAGhB,WAAU,IAAD,OACP,OACE,qBAAKC,UAAU,MAAf,SACE,uBACEZ,KAAK,OACLa,OAAO,aACPC,IAAKC,KAAKtC,SACVuC,SAAU,SAAAnC,GAAK,OAAI,EAAKD,aAAaC,Y,GAnC7BoC,aCSHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.9fdf72c4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport * as XLSX from \"xlsx\";\nclass App extends Component {\n  inputRef = React.createRef();\n  fileHandling = event => {\n    let file = event.target.files[0];\n    this.readExcel(file);\n  };\n  readExcel = file => {\n    const promise = new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n      fileReader.onload = e => {\n        const bufferArray = e.target.result;\n        console.log(bufferArray);\n\n        const wb = XLSX.read(bufferArray, { type: \"buffer\" });\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\n        resolve(data);\n      };\n      fileReader.onerror = error => {\n        reject(error);\n      };\n    });\n    promise.then(d => {\n      console.log(d);\n    });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <input\n          type=\"file\"\n          accept=\".xls,.xlsx\"\n          ref={this.inputRef}\n          onChange={event => this.fileHandling(event)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}